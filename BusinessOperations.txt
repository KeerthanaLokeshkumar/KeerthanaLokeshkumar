package com.assesment.phase;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


public class BusinessOperations {
	
		public static void create_MainFolder_IfNot_Present(String folderName) {
			File file = new File(folderName);

		
			if (!file.exists()) {
				file.mkdirs();
			}
		}
	
		public static void display_Files(String path) {
			BusinessOperations.create_MainFolder_IfNot_Present("Main");
			
			System.out.println("Display all the files");

			List<String> filesListNames = BusinessOperations.files_In_Folder(path, 0, new ArrayList<String>());
			
			System.out.println("Display files in order\n");
			Collections.sort(filesListNames);

			filesListNames.stream().forEach(System.out::println);
		}

		public static List<String> files_In_Folder(String path, int Count, List<String> fileListNames) {
			File directory = new File(path);
			File[] files = directory.listFiles();
			List<File> filesList = Arrays.asList(files);

			Collections.sort(filesList);

			if (files != null && files.length > 0) {
for (File file : filesList) {

					System.out.print(Count * 2);

					if (file.isDirectory()) {
						System.out.println("`-- " + file.getName());

					
						fileListNames.add(file.getName());
						files_In_Folder(file.getAbsolutePath(), Count + 1, fileListNames);
					} else {
						System.out.println("|-- " + file.getName());
						fileListNames.add(file.getName());
					}
				}
			} else {
				System.out.print(Count * 2);
System.out.println("no files in this folder");
			}
			System.out.println();
			return fileListNames;
		}

		public static void create_User_Defined_File(String fileToAdd, Scanner sc) {
			BusinessOperations.create_MainFolder_IfNot_Present("Main");
			Path pathToFile = Paths.get("Main" + fileToAdd);
			try {
				Files.createDirectories(pathToFile.getParent());
				Files.createFile(pathToFile);
				System.out.println(fileToAdd + " file created successfully");

				System.out.println("Would you like to add? (Y/N)");
				String choice = sc.next().toLowerCase();

				sc.nextLine();
				if (choice.equals("y")) {
					System.out.println(" enter\n");
					String content = sc.nextLine();
					Files.write(pathToFile, content.getBytes());
					System.out.println("\nContent " + fileToAdd);
				}

			} catch (IOException e) {
				System.out.println("Failed to create file " + fileToAdd);
System.out.println(e.getClass().getName());
			}
		}

		public static List<String> display_File_Locations(String fileName, String path) {
			List<String> fileListNames = new ArrayList<>();
			BusinessOperations.search_File(path, fileName, fileListNames);

			if (fileListNames.isEmpty()) {
				System.out.println("\n file name not found\"" + fileName + "\"\n\n");
			} else {
				System.out.println("\nFile location(s):");

				List<String> files = IntStream.range(0, fileListNames.size())
						.mapToObj(index -> (index + 1) + ": " + fileListNames.get(index)).collect(Collectors.toList());

				files.forEach(System.out::println);
			}

			return fileListNames;
		}

		public static void search_File(String path, String fileName, List<String> fileListNames) {
			File dir = new File(path);
			File[] files = dir.listFiles();
			List<File> filesList = Arrays.asList(files);

			if (files != null && files.length > 0) {
				for (File file : filesList) {

					if (file.getName().startsWith(fileName)) {
						fileListNames.add(file.getAbsolutePath());
					}

					
					if (file.isDirectory()) {
						search_File(file.getAbsolutePath(), fileName, fileListNames);
					}
				}
System.out.println(e.getClass().getName());
			}
		}

		public static List<String> display_File_Locations(String fileName, String path) {
			List<String> fileListNames = new ArrayList<>();
			BusinessOperations.search_File(path, fileName, fileListNames);

			if (fileListNames.isEmpty()) {
				System.out.println("\n file name not found\"" + fileName + "\"\n\n");
			} else {
				System.out.println("\nFile location(s):");

				List<String> files = IntStream.range(0, fileListNames.size())
						.mapToObj(index -> (index + 1) + ": " + fileListNames.get(index)).collect(Collectors.toList());

				files.forEach(System.out::println);
			}

			return fileListNames;
		}

		public static void search_File(String path, String fileName, List<String> fileListNames) {
			File dir = new File(path);
			File[] files = dir.listFiles();
			List<File> filesList = Arrays.asList(files);

			if (files != null && files.length > 0) {
				for (File file : filesList) {

					if (file.getName().startsWith(fileName)) {
						fileListNames.add(file.getAbsolutePath());
					}

					
					if (file.isDirectory()) {
						search_File(file.getAbsolutePath(), fileName, fileListNames);
					}
				}
	}
				}
			}
		}

		public static void delete_User_Defined_Files(String path) {

			File currFile = new File(path);
			File[] files = currFile.listFiles();

			if (files != null && files.length > 0) {
				for (File file : files) {

					String fileName = file.getName() + " at " + file.getParent();
					if (file.isDirectory()) {
						delete_User_Defined_Files(file.getAbsolutePath());
					}

					if (file.delete()) {
						System.out.println(fileName + " deleted successfully");
					} else {
						System.out.println("Failed to delete " + fileName);
					}
				}
			}

			String currFileName = currFile.getName() + " at " + currFile.getParent();
			if (currFile.delete()) {
				System.out.println(currFileName + " deleted successfully");
			} else {
				System.out.println("Failed to delete " + currFileName);
			}
		}
	}


